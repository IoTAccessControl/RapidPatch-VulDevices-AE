<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\nrf52840_qiaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\nrf52840_qiaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Nov 04 18:40:31 2021
<BR><P>
<H3>Maximum Stack Usage =        520 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
test_ebpf_c7 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[15]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">NMI_Handler</a><BR>
 <LI><a href="#[16]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">HardFault_Handler</a><BR>
 <LI><a href="#[17]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[18]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">BusFault_Handler</a><BR>
 <LI><a href="#[19]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">UsageFault_Handler</a><BR>
 <LI><a href="#[1a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">SVC_Handler</a><BR>
 <LI><a href="#[1c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">PendSV_Handler</a><BR>
 <LI><a href="#[1d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">SysTick_Handler</a><BR>
 <LI><a href="#[2d]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[be]">nrf_log_frontend_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bf]">nrf_log_frontend_std_0</a><BR>
 <LI><a href="#[e9]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e9]">buffer_add</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">BusFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2d]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[31]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[46]">CRYPTOCELL_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1b]">DebugMon_Handler</a> from cortex-m4_fbp.o(.emb_text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2c]">ECB_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[52]">FPB_Handler0</a> from cortex-m4_fbp.o(.emb_text) referenced from cortex-m4_fbp.o(.constdata)
 <LI><a href="#[52]">FPB_Handler0</a> from cortex-m4_fbp.o(.emb_text) referenced from cortex-m4_fbp.o(i.fpb_setup_test)
 <LI><a href="#[62]">FPB_Handler1</a> from cortex-m4_fbp.o(.emb_text) referenced from cortex-m4_fbp.o(.constdata)
 <LI><a href="#[63]">FPB_Handler2</a> from cortex-m4_fbp.o(.emb_text) referenced from cortex-m4_fbp.o(.constdata)
 <LI><a href="#[64]">FPB_Handler3</a> from cortex-m4_fbp.o(.emb_text) referenced from cortex-m4_fbp.o(.constdata)
 <LI><a href="#[65]">FPB_Handler4</a> from cortex-m4_fbp.o(.emb_text) referenced from cortex-m4_fbp.o(.constdata)
 <LI><a href="#[50]">FPB_Handler5</a> from cortex-m4_fbp.o(.emb_text) referenced from cortex-m4_fbp.o(.constdata)
 <LI><a href="#[50]">FPB_Handler5</a> from cortex-m4_fbp.o(.emb_text) referenced from cortex-m4_fbp.o(i.fpb_disable_cur_inst)
 <LI><a href="#[42]">FPU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[24]">GPIOTE_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[16]">HardFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[41]">I2S_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3c]">MWU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[17]">MemoryManagement_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[23]">NFCT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[15]">NMI_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3b]">PDM_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1e]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3a]">PWM0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3d]">PWM1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3e]">PWM2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[47]">PWM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1c]">PendSV_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[30]">QDEC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[45]">QSPI_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1f]">RADIO_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2b]">RNG_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[29]">RTC0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2f]">RTC1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[40]">RTC2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[51]">RawBuggyFunc</a> from cortex-m4_fbp.o(i.RawBuggyFunc) referenced from cortex-m4_fbp.o(i.fpb_setup_test)
 <LI><a href="#[14]">Reset_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[25]">SAADC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[21]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[22]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3f]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[48]">SPIM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1a]">SVC_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[32]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[33]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[34]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[35]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[36]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[37]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1d]">SysTick_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[4a]">SystemInit</a> from system_nrf52840.o(i.SystemInit) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[2a]">TEMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[26]">TIMER0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[27]">TIMER1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[28]">TIMER2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[38]">TIMER3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[39]">TIMER4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[20]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[44]">UARTE1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[43]">USBD_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[19]">UsageFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2e]">WDT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[4b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[4c]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[4e]">call_dummy_buggy_MQTT_function</a> from fixed_patch_points.o(i.call_dummy_buggy_MQTT_function) referenced from fixed_patch_points.o(i.call_dummy_buggy_MQTT_function)
 <LI><a href="#[4f]">dummy_buggy_MQTT_packet_length_decode</a> from fixed_patch_points.o(i.dummy_buggy_MQTT_packet_length_decode) referenced from fixed_patch_points.o(i.call_dummy_buggy_MQTT_function)
 <LI><a href="#[57]">iot_call_C_func_noret</a> from ebpf_vm.o(i.iot_call_C_func_noret) referenced from ebpf_vm.o(i.set_default_helpers)
 <LI><a href="#[56]">iot_print_log</a> from ebpf_vm.o(i.iot_print_log) referenced from ebpf_vm.o(i.set_default_helpers)
 <LI><a href="#[49]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5b]">my_memmove</a> from ebpf_test.o(i.my_memmove) referenced from ebpf_test.o(i.test_ebpf_c3)
 <LI><a href="#[61]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[60]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[5f]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[5d]">nrfx_uart_0_irq_handler</a> from nrfx_uart.o(i.nrfx_uart_0_irq_handler) referenced from nrfx_uart.o(.constdata)
 <LI><a href="#[5e]">nrfx_uarte_0_irq_handler</a> from nrfx_uarte.o(i.nrfx_uarte_0_irq_handler) referenced from nrfx_uarte.o(.constdata)
 <LI><a href="#[3]">reset_patch</a> from ihp_cli.o(i.reset_patch) referenced 2 times from ihp_cli.o(.data)
 <LI><a href="#[4]">run_eva_test</a> from ihp_cli.o(i.run_eva_test) referenced 2 times from ihp_cli.o(.data)
 <LI><a href="#[6]">run_fixed_patch_point_test</a> from ihp_cli.o(i.run_fixed_patch_point_test) referenced 2 times from ihp_cli.o(.data)
 <LI><a href="#[55]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[5]">start_patch_service</a> from patch_service.o(i.start_patch_service) referenced 2 times from ihp_cli.o(.data)
 <LI><a href="#[1]">test_debug_patch</a> from ihp_cli.o(i.test_debug_patch) referenced 2 times from ihp_cli.o(.data)
 <LI><a href="#[5a]">test_dynamic_bug</a> from dynamic_patch_load.o(i.test_dynamic_bug) referenced from dynamic_patch_load.o(i.show_local_patch_desc)
 <LI><a href="#[5a]">test_dynamic_bug</a> from dynamic_patch_load.o(i.test_dynamic_bug) referenced from ihp_cli.o(i.this_is_cve_trigger_func)
 <LI><a href="#[7]">test_ebpf_c0</a> from ebpf_test.o(i.test_ebpf_c0) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[8]">test_ebpf_c1</a> from ebpf_test.o(i.test_ebpf_c1) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[11]">test_ebpf_c10</a> from ebpf_test.o(i.test_ebpf_c10) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[12]">test_ebpf_c11</a> from ebpf_test.o(i.test_ebpf_c11) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[13]">test_ebpf_c12</a> from ebpf_test.o(i.test_ebpf_c12) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[9]">test_ebpf_c2</a> from ebpf_test.o(i.test_ebpf_c2) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[a]">test_ebpf_c3</a> from ebpf_test.o(i.test_ebpf_c3) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[b]">test_ebpf_c4</a> from ebpf_test.o(i.test_ebpf_c4) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[c]">test_ebpf_c5</a> from ebpf_test.o(i.test_ebpf_c5) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[d]">test_ebpf_c6</a> from ebpf_test.o(i.test_ebpf_c6) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[e]">test_ebpf_c7</a> from ebpf_test.o(i.test_ebpf_c7) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[f]">test_ebpf_c8</a> from ebpf_test.o(i.test_ebpf_c8) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[10]">test_ebpf_c9</a> from ebpf_test.o(i.test_ebpf_c9) referenced 2 times from ebpf_test.o(.data)
 <LI><a href="#[2]">test_patch_trigger</a> from ihp_cli.o(i.test_patch_trigger) referenced 2 times from ihp_cli.o(.data)
 <LI><a href="#[0]">this_is_cve_trigger_func</a> from ihp_cli.o(i.this_is_cve_trigger_func) referenced 2 times from ihp_cli.o(.data)
 <LI><a href="#[59]">tmp_map_get_val</a> from ebpf_vm.o(i.tmp_map_get_val) referenced from ebpf_vm.o(i.set_default_helpers)
 <LI><a href="#[58]">tmp_map_save_val</a> from ebpf_vm.o(i.tmp_map_save_val) referenced from ebpf_vm.o(i.set_default_helpers)
 <LI><a href="#[5c]">uart_error_handle</a> from main.o(i.uart_error_handle) referenced from main.o(i.uart_config)
 <LI><a href="#[4d]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[54]">uart_evt_handler</a> from nrf_drv_uart.o(i.uart_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[53]">uarte_evt_handler</a> from nrf_drv_uart.o(i.uarte_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[1a2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[66]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[80]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[14b]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[14c]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>

<P><STRONG><a name="[14a]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[1a8]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[149]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[14e]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[1a9]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[68]"></a>HERA_Dipatcher</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cortex-m4_fbp.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hera_fix_func
</UL>

<P><STRONG><a name="[52]"></a>FPB_Handler0</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cortex-m4_fbp.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = FPB_Handler0 &rArr; leave_fpb_bpkt &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_fpb_bpkt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cortex-m4_fbp.o(i.fpb_setup_test)
<LI> cortex-m4_fbp.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>FPB_Handler1</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cortex-m4_fbp.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = FPB_Handler1 &rArr; leave_fpb_bpkt &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_fpb_bpkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cortex-m4_fbp.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>FPB_Handler2</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cortex-m4_fbp.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = FPB_Handler2 &rArr; leave_fpb_bpkt &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_fpb_bpkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cortex-m4_fbp.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>FPB_Handler3</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cortex-m4_fbp.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = FPB_Handler3 &rArr; leave_fpb_bpkt &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_fpb_bpkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cortex-m4_fbp.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>FPB_Handler4</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cortex-m4_fbp.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = FPB_Handler4 &rArr; leave_fpb_bpkt &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_fpb_bpkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cortex-m4_fbp.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>FPB_Handler5</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cortex-m4_fbp.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FPB_Handler5 &rArr; fpb_enable_callback &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_enable_callback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cortex-m4_fbp.o(i.fpb_disable_cur_inst)
<LI> cortex-m4_fbp.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>set_return</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortex-m4_fbp.o(.emb_text), UNUSED)

<P><STRONG><a name="[1b]"></a>DebugMon_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cortex-m4_fbp.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = DebugMon_Handler &rArr; leave_debug_monitor &rArr; run_patch_here &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_debug_monitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>save_context</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fixed_patch_points.o(.emb_text), UNUSED)

<P><STRONG><a name="[1ad]"></a>restore_context</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fixed_patch_points.o(.emb_text), UNUSED)

<P><STRONG><a name="[6d]"></a>fixed_patch_point_hanlder</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fixed_patch_points.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fixed_patch_point_hanlder &rArr; dispatch_fixed_patch_point &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_fixed_patch_point
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_buggy_MQTT_packet_length_decode
</UL>

<P><STRONG><a name="[14]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CRYPTOCELL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_exec
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_exec
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ae]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_exec
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1af]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_exec
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1b0]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_realloc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_freertos_cve
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fpb_bkpt
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c9
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c2
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c11
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_print_porting
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_shell_cli
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_patch_sys
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_patch_mode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_set_inst
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c9
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c7
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c6
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c5
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c3
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c12
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c11
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_mem_allocate
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[159]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[194]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
</UL>

<P><STRONG><a name="[88]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[75]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_calloc
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_dump
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b6]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[67]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1b7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[79]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1b8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>

<P><STRONG><a name="[84]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[4a]"></a>SystemInit</STRONG> (Thumb, 424 bytes, Stack size 12 bytes, system_nrf52840.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ba]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1bb]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1bc]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[137]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_print_porting
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
</UL>

<P><STRONG><a name="[1bd]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1be]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1bf]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[9d]"></a>_emit_lsh64_imm</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, jit_thumb2.o(i._emit_lsh64_imm))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _emit_lsh64_imm &rArr; arm_bpf_put_reg64 &rArr; emit_a32_mov_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg64
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg64
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_mov_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[a1]"></a>_emit_lsh64_reg</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, jit_thumb2.o(i._emit_lsh64_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _emit_lsh64_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg32
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg64
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg32
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[b1]"></a>add_hw_bkpt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cortex-m4_fbp.o(i.add_hw_bkpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = add_hw_bkpt &rArr; add_fpb_bkpt &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fpb_bkpt
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_patch
</UL>

<P><STRONG><a name="[bc]"></a>app_error_fault_handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[c0]"></a>app_error_handler_bare</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handle
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>

<P><STRONG><a name="[c1]"></a>app_fifo_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[c8]"></a>app_fifo_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[c3]"></a>app_fifo_put</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[c5]"></a>app_uart_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_uart_fifo.o(i.app_uart_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = app_uart_get &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_get_char
</UL>

<P><STRONG><a name="[c7]"></a>app_uart_init</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
</UL>

<P><STRONG><a name="[ca]"></a>app_uart_put</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_put_char
</UL>

<P><STRONG><a name="[ce]"></a>app_util_critical_region_enter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[d0]"></a>app_util_critical_region_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[cf]"></a>app_util_disable_irq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[d1]"></a>app_util_enable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[db]"></a>arraymap_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hashmap.o(i.arraymap_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arraymap_destroy &rArr; ebpf_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patch_dispatcher
</UL>

<P><STRONG><a name="[dd]"></a>arraymap_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hashmap.o(i.arraymap_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arraymap_get &rArr; binary_search
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_search
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fixed_patch_by_lr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_map_get_val
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_num_eva
</UL>

<P><STRONG><a name="[1a1]"></a>arraymap_iter_val</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hashmap.o(i.arraymap_iter_val))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bits_filter
</UL>

<P><STRONG><a name="[df]"></a>arraymap_new</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hashmap.o(i.arraymap_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arraymap_new &rArr; ebpf_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_patch_sys
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_map_save_val
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_num_eva
</UL>

<P><STRONG><a name="[b7]"></a>arraymap_set</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, hashmap.o(i.arraymap_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = arraymap_set &rArr; ebpf_realloc &rArr; ebpf_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fixed_patch_to_ctx
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmp_map_save_val
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_num_eva
</UL>

<P><STRONG><a name="[e1]"></a>bsp_board_init</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, boards.o(i.bsp_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_board_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>bsp_board_led_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[e3]"></a>bsp_board_leds_off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[168]"></a>buffer_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[b4]"></a>calc_bpkt_addr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cortex-m4_fbp.o(i.calc_bpkt_addr))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_patch_to_ctx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dynamic_patch_to_ctx
</UL>

<P><STRONG><a name="[b5]"></a>calc_bpkt_pc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utils.o(i.calc_bpkt_pc))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_patch_to_ctx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dynamic_patch_to_ctx
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_disable_cur_inst
</UL>

<P><STRONG><a name="[ba]"></a>calc_branch_instr</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, cortex-m4_fbp.o(i.calc_branch_instr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_branch_instr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_disable_cur_inst
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_setup_test
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fpb_bkpt
</UL>

<P><STRONG><a name="[102]"></a>clear_all_hw_bkpt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cortex-m4_fbp.o(i.clear_all_hw_bkpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_all_hw_bkpt
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_patch_mode
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_patch
</UL>

<P><STRONG><a name="[183]"></a>cycles2us</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, profiling.o(i.cycles2us))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_num_eva
</UL>

<P><STRONG><a name="[81]"></a>debug_log</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, utils.o(i.debug_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_print_porting
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_hw_bkpt
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_patch_to_ctx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dynamic_patch_to_ctx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_patch_sys
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_debugmon_patch
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_local_patch_desc
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_hw_bkpt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_all_patches
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ebpf_test
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ebpf_eva
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_local_patch
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_dump
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_fixed_patch
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;this_is_cve_trigger_func
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_debug_patch
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_patch_list
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_print_log
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_call_C_func_noret
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_fixed_patch_desc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_fixed_patch_point
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_buggy_MQTT_packet_length_decode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_dummy_buggy_MQTT_function
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_disable_cur_inst
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_fpb_bpkt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_debug_monitor
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_enable_callback
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_freertos_cve
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_patch_here
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_setup_test
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_monitor_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fpb_bkpt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawBuggyFunc
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_num_eva
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memmove
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_body
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_sub_imm
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_dump_inst
</UL>

<P><STRONG><a name="[6e]"></a>dispatch_fixed_patch_point</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fixed_patch_points.o(i.dispatch_fixed_patch_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dispatch_fixed_patch_point &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ebpf_filter
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fixed_patch_by_lr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_patch_point_hanlder
</UL>

<P><STRONG><a name="[10d]"></a>ebpf_calloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebpf_allocator.o(i.ebpf_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ebpf_calloc &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_local_patch
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_fixed_patch
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_default_helper_func
</UL>

<P><STRONG><a name="[10e]"></a>ebpf_eva</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, ebpf_test.o(i.ebpf_eva))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_exec
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_end
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_dump
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_add_event
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_mem_statistic
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_mem_free
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ebpf_alloc_size
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_jit_code
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_set_inst
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c9
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c8
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c7
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c6
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c5
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c4
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c3
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c2
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c12
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c11
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c10
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c1
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c0
</UL>

<P><STRONG><a name="[dc]"></a>ebpf_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebpf_allocator.o(i.ebpf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ebpf_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_destroy
</UL>

<P><STRONG><a name="[b3]"></a>ebpf_malloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ebpf_allocator.o(i.ebpf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ebpf_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ebpf_vm
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_new
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dynamic_patch_to_ctx
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_realloc
</UL>

<P><STRONG><a name="[e0]"></a>ebpf_realloc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ebpf_allocator.o(i.ebpf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ebpf_realloc &rArr; ebpf_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_malloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_set
</UL>

<P><STRONG><a name="[118]"></a>ebpf_register</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ebpf_vm.o(i.ebpf_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ebpf_register &rArr; use_default_helper_func &rArr; ebpf_calloc &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_default_helper_func
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default_helpers
</UL>

<P><STRONG><a name="[111]"></a>ebpf_vm_exec</STRONG> (Thumb, 3284 bytes, Stack size 304 bytes, ebpf_vm.o(i.ebpf_vm_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bounds_check
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ebpf_filter
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>

<P><STRONG><a name="[10f]"></a>ebpf_vm_set_inst</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ebpf_vm.o(i.ebpf_vm_set_inst))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ebpf_vm_set_inst &rArr; init_iot_ebpf_helpers &rArr; set_default_helpers &rArr; ebpf_register &rArr; use_default_helper_func &rArr; ebpf_calloc &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_iot_ebpf_helpers
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_local_patch
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_fixed_patch
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>

<P><STRONG><a name="[f0]"></a>emit_alu64_reg</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, jit_thumb2.o(i.emit_alu64_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = emit_alu64_reg &rArr; emit_alu32_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg64
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg64
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg32
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[fa]"></a>emit_ldx_reg</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, jit_thumb2.o(i.emit_ldx_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = emit_ldx_reg &rArr; arm_bpf_put_reg64 &rArr; emit_a32_mov_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ldst_imm
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_imm
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mov_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg64
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldrh_i
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldrb_i
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldr_i
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_add_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[125]"></a>fpb_disable_cur_inst</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, cortex-m4_fbp.o(i.fpb_disable_cur_inst))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fpb_disable_cur_inst &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_16_bit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bpkt_pc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_branch_instr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_fpb_bpkt
</UL>

<P><STRONG><a name="[6b]"></a>fpb_enable_callback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cortex-m4_fbp.o(i.fpb_enable_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fpb_enable_callback &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPB_Handler5
</UL>

<P><STRONG><a name="[117]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_free
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_realloc
</UL>

<P><STRONG><a name="[112]"></a>gen_jit_code</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, jit.o(i.gen_jit_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = gen_jit_code &rArr; jit_compile &rArr; build_body &rArr; build_inst &rArr; emit_alu64_reg &rArr; emit_alu32_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_mem_free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_dump_inst
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_compile
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_state_set_mem
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_mem_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_local_patch
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>

<P><STRONG><a name="[182]"></a>get_cur_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, profiling.o(i.get_cur_tick))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_num_eva
</UL>

<P><STRONG><a name="[133]"></a>get_dynamic_patch_by_bpkt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, iotpatch.o(i.get_dynamic_patch_by_bpkt))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_fpb_bpkt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_patch_here
</UL>

<P><STRONG><a name="[116]"></a>get_ebpf_alloc_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ebpf_allocator.o(i.get_ebpf_alloc_size))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>

<P><STRONG><a name="[109]"></a>get_fixed_patch_by_lr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iotpatch.o(i.get_fixed_patch_by_lr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_fixed_patch_by_lr &rArr; arraymap_get &rArr; binary_search
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_fixed_patch_point
</UL>

<P><STRONG><a name="[69]"></a>hera_fix_func</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cortex-m4_fbp.o(i.hera_fix_func))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HERA_Dipatcher
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_freertos_cve
</UL>

<P><STRONG><a name="[12b]"></a>init_ebpf_vm</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ebpf_vm.o(i.init_ebpf_vm))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = init_ebpf_vm &rArr; init_iot_ebpf_helpers &rArr; set_default_helpers &rArr; ebpf_register &rArr; use_default_helper_func &rArr; ebpf_calloc &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_malloc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_iot_ebpf_helpers
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_local_patch
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_fixed_patch
</UL>

<P><STRONG><a name="[11c]"></a>init_iot_ebpf_helpers</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ebpf_vm.o(i.init_iot_ebpf_helpers))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = init_iot_ebpf_helpers &rArr; set_default_helpers &rArr; ebpf_register &rArr; use_default_helper_func &rArr; ebpf_calloc &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_default_helpers
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_default_helper_func
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ebpf_vm
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_set_inst
</UL>

<P><STRONG><a name="[12d]"></a>init_patch_sys</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iotpatch.o(i.init_patch_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = init_patch_sys &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bits_filter
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_patch_service
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_local_patch
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_fixed_patch
</UL>

<P><STRONG><a name="[129]"></a>jit_compile</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, jit_thumb2.o(i.jit_compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = jit_compile &rArr; build_body &rArr; build_inst &rArr; emit_alu64_reg &rArr; emit_alu32_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_prologue
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_body
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_mov_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_jit_code
</UL>

<P><STRONG><a name="[12a]"></a>jit_dump_inst</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jit_thumb2.o(i.jit_dump_inst))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = jit_dump_inst &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_jit_code
</UL>

<P><STRONG><a name="[127]"></a>jit_mem_allocate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, jit.o(i.jit_mem_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jit_mem_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_jit_code
</UL>

<P><STRONG><a name="[113]"></a>jit_mem_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, jit.o(i.jit_mem_free))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_jit_code
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>

<P><STRONG><a name="[115]"></a>jit_mem_statistic</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, jit.o(i.jit_mem_statistic))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>

<P><STRONG><a name="[128]"></a>jit_state_set_mem</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, jit.o(i.jit_state_set_mem))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_jit_code
</UL>

<P><STRONG><a name="[6c]"></a>leave_debug_monitor</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, cortex-m4_fbp.o(i.leave_debug_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = leave_debug_monitor &rArr; run_patch_here &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_patch_here
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_enable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[6a]"></a>leave_fpb_bpkt</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cortex-m4_fbp.o(i.leave_fpb_bpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = leave_fpb_bpkt &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ebpf_filter
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dynamic_patch_by_bpkt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_end
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_disable_cur_inst
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPB_Handler4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPB_Handler3
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPB_Handler2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPB_Handler1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPB_Handler0
</UL>

<P><STRONG><a name="[bb]"></a>little_endian_16_bit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utils.o(i.little_endian_16_bit))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_disable_cur_inst
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_setup_test
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fpb_bkpt
</UL>

<P><STRONG><a name="[134]"></a>load_local_fixed_patch</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fixed_patch_load.o(i.load_local_fixed_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = load_local_fixed_patch &rArr; load_local_patch_to_ctx &rArr; active_patch &rArr; add_hw_bkpt &rArr; add_fpb_bkpt &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ebpf_vm
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_patch_to_ctx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_patch_sys
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_fixed_patch_desc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_calloc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_set_inst
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_fixed_patch_point_test
</UL>

<P><STRONG><a name="[136]"></a>load_local_patch_to_ctx</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, iotpatch.o(i.load_local_patch_to_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = load_local_patch_to_ctx &rArr; active_patch &rArr; add_hw_bkpt &rArr; add_fpb_bkpt &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bpkt_pc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bpkt_addr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_fixed_patch_to_ctx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_dynamic_patch_to_ctx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_patch
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_local_patch
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_fixed_patch
</UL>

<P><STRONG><a name="[106]"></a>log_print_porting</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ihp_porting.o(i.log_print_porting))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_put_char
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>

<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 288 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; run_shell_cli &rArr; shell_process &rArr; shell_dispatch_cmd &rArr; read_local_patch &rArr; gen_jit_code &rArr; jit_compile &rArr; build_body &rArr; build_inst &rArr; emit_alu64_reg &rArr; emit_alu32_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_shell_cli
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_button_click
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[76]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_malloc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[13b]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[139]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[e7]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[147]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[10c]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[148]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[14d]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[14f]"></a>nrf_balloc_alloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_balloc_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[150]"></a>nrf_balloc_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_balloc_free
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[174]"></a>nrf_balloc_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[c9]"></a>nrf_drv_uart_init</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[157]"></a>nrf_fprintf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[ea]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[158]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[167]"></a>nrf_log_backend_add</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_log_backend_add
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[160]"></a>nrf_log_backend_rtt_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[161]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 200 bytes, Stack size 96 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[184]"></a>nrf_log_color_id_get</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[13d]"></a>nrf_log_default_backends_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_log_default_backends.o(i.nrf_log_default_backends_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_log_default_backends_init &rArr; nrf_log_backend_add
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 536 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_button_click
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[bf]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[16c]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_button_click
</UL>

<P><STRONG><a name="[165]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[13c]"></a>nrf_log_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>

<P><STRONG><a name="[172]"></a>nrf_log_module_name_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[bd]"></a>nrf_log_panic</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[164]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[169]"></a>nrf_memobj_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[173]"></a>nrf_memobj_free</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[162]"></a>nrf_memobj_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[170]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[166]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[163]"></a>nrf_memobj_read</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_memobj_read &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[16a]"></a>nrf_memobj_write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_memobj_write &rArr; memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[171]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[175]"></a>nrfx_prs_acquire</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_prs_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[5d]"></a>nrfx_uart_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_uart_0_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>nrfx_uart_init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[154]"></a>nrfx_uart_rx</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[156]"></a>nrfx_uart_tx</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[cc]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[5e]"></a>nrfx_uarte_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uarte_0_irq_handler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uarte.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>nrfx_uarte_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrfx_uarte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[153]"></a>nrfx_uarte_rx</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrfx_uarte_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_uarte_rx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[155]"></a>nrfx_uarte_tx</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[cb]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[141]"></a>on_button_click</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.on_button_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = on_button_click &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_test_by_id
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>patch_num_eva</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ebpf_test.o(i.patch_num_eva))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = patch_num_eva &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_new
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cur_tick
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycles2us
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patch_dispatcher
</UL>

<P><STRONG><a name="[110]"></a>profile_add_event</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, profiling.o(i.profile_add_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = profile_add_event
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fixed_patch_point
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;this_is_cve_trigger_func
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_freertos_cve
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patch_dispatcher
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>

<P><STRONG><a name="[114]"></a>profile_dump</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, profiling.o(i.profile_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = profile_dump &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycles_to_us
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fixed_patch_point
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;this_is_cve_trigger_func
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_freertos_cve
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patch_dispatcher
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c0
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>

<P><STRONG><a name="[101]"></a>profile_end</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, profiling.o(i.profile_end))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;this_is_cve_trigger_func
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_dummy_buggy_MQTT_function
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_fpb_bpkt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_freertos_cve
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_patch_here
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patch_dispatcher
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c0
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>

<P><STRONG><a name="[100]"></a>profile_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, profiling.o(i.profile_start))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;this_is_cve_trigger_func
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_dummy_buggy_MQTT_function
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_fpb_bpkt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_freertos_cve
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_patch_here
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patch_dispatcher
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ebpf_c0
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>

<P><STRONG><a name="[188]"></a>read_local_patch</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, dynamic_patch_load.o(i.read_local_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = read_local_patch &rArr; gen_jit_code &rArr; jit_compile &rArr; build_body &rArr; build_inst &rArr; emit_alu64_reg &rArr; emit_alu32_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ebpf_vm
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_patch_to_ctx
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_patch_sys
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_local_patch_desc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_calloc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_jit_code
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_set_inst
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
</UL>

<P><STRONG><a name="[18b]"></a>run_ebpf_eva</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ebpf_test.o(i.run_ebpf_eva))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = run_ebpf_eva &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
</UL>

<P><STRONG><a name="[10a]"></a>run_ebpf_filter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iotpatch.o(i.run_ebpf_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_fixed_patch_point
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_fpb_bpkt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_patch_here
</UL>

<P><STRONG><a name="[18c]"></a>run_ebpf_test</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ebpf_test.o(i.run_ebpf_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = run_ebpf_test &rArr; test_patch_dispatcher &rArr; patch_num_eva &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patch_dispatcher
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eva_test
</UL>

<P><STRONG><a name="[13f]"></a>run_shell_cli</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ihp_cli.o(i.run_shell_cli))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = run_shell_cli &rArr; shell_process &rArr; shell_dispatch_cmd &rArr; read_local_patch &rArr; gen_jit_code &rArr; jit_compile &rArr; build_body &rArr; build_inst &rArr; emit_alu64_reg &rArr; emit_alu32_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_put_char
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_get_char
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_echo_str
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_print_help
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>run_test_by_id</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ihp_cli.o(i.run_test_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = run_test_by_id &rArr; cli_print_help &rArr; shell_printf &rArr; shell_echo_str &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_print_help
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_button_click
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
</UL>

<P><STRONG><a name="[12c]"></a>set_default_helpers</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ebpf_vm.o(i.set_default_helpers))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = set_default_helpers &rArr; ebpf_register &rArr; use_default_helper_func &rArr; ebpf_calloc &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_register
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_iot_ebpf_helpers
</UL>

<P><STRONG><a name="[192]"></a>set_patch_mode</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cortex-m4_fbp.o(i.set_patch_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = set_patch_mode &rArr; debug_monitor_init &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_all_hw_bkpt
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_monitor_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
</UL>

<P><STRONG><a name="[190]"></a>shell_get_char</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ihp_porting.o(i.shell_get_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = shell_get_char &rArr; app_uart_get &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_shell_cli
</UL>

<P><STRONG><a name="[138]"></a>shell_put_char</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ihp_porting.o(i.shell_put_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_shell_cli
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_print_porting
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_echo_str
</UL>

<P><STRONG><a name="[197]"></a>show_all_patches</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, iotpatch.o(i.show_all_patches))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = show_all_patches &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
</UL>

<P><STRONG><a name="[135]"></a>show_fixed_patch_desc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fixed_patch_load.o(i.show_fixed_patch_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = show_fixed_patch_desc &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_fixed_patch
</UL>

<P><STRONG><a name="[18a]"></a>show_hw_bkpt</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, cortex-m4_fbp.o(i.show_hw_bkpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = show_hw_bkpt &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_patch
</UL>

<P><STRONG><a name="[189]"></a>show_local_patch_desc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dynamic_patch_load.o(i.show_local_patch_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = show_local_patch_desc &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_local_patch
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_patch_list
</UL>

<P><STRONG><a name="[5]"></a>start_patch_service</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, patch_service.o(i.start_patch_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = start_patch_service &rArr; init_patch_sys &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_patch_sys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ihp_cli.o(.data)
</UL>
<P><STRONG><a name="[195]"></a>str2int</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, utils.o(i.str2int))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
</UL>

<P><STRONG><a name="[199]"></a>test_debugmon_patch</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cortex-m4_fbp.o(i.test_debugmon_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = test_debugmon_patch &rArr; test_freertos_cve &rArr; profile_dump &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_freertos_cve
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_setup_test
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_debug_patch
</UL>

<P><STRONG><a name="[5a]"></a>test_dynamic_bug</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dynamic_patch_load.o(i.test_dynamic_bug))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;this_is_cve_trigger_func
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ihp_cli.o(i.this_is_cve_trigger_func)
<LI> dynamic_patch_load.o(i.show_local_patch_desc)
</UL>
<P><STRONG><a name="[7]"></a>test_ebpf_c0</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, ebpf_test.o(i.test_ebpf_c0))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = test_ebpf_c0 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_end
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_dump
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>test_ebpf_c1</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, ebpf_test.o(i.test_ebpf_c1))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = test_ebpf_c1 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>test_ebpf_c10</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, ebpf_test.o(i.test_ebpf_c10))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = test_ebpf_c10 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>test_ebpf_c11</STRONG> (Thumb, 42 bytes, Stack size 80 bytes, ebpf_test.o(i.test_ebpf_c11))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = test_ebpf_c11 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>test_ebpf_c12</STRONG> (Thumb, 56 bytes, Stack size 96 bytes, ebpf_test.o(i.test_ebpf_c12))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = test_ebpf_c12 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>test_ebpf_c2</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, ebpf_test.o(i.test_ebpf_c2))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = test_ebpf_c2 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>test_ebpf_c3</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, ebpf_test.o(i.test_ebpf_c3))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = test_ebpf_c3 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>test_ebpf_c4</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, ebpf_test.o(i.test_ebpf_c4))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = test_ebpf_c4 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>test_ebpf_c5</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, ebpf_test.o(i.test_ebpf_c5))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = test_ebpf_c5 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>test_ebpf_c6</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ebpf_test.o(i.test_ebpf_c6))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = test_ebpf_c6 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>test_ebpf_c7</STRONG> (Thumb, 54 bytes, Stack size 128 bytes, ebpf_test.o(i.test_ebpf_c7))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = test_ebpf_c7 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>test_ebpf_c8</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, ebpf_test.o(i.test_ebpf_c8))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = test_ebpf_c8 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>test_ebpf_c9</STRONG> (Thumb, 42 bytes, Stack size 80 bytes, ebpf_test.o(i.test_ebpf_c9))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = test_ebpf_c9 &rArr; ebpf_eva &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_eva
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(.data)
</UL>
<P><STRONG><a name="[18e]"></a>test_fixed_patch_point</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fixed_patch_points.o(i.test_fixed_patch_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = test_fixed_patch_point &rArr; call_dummy_buggy_MQTT_function &rArr; dummy_buggy_MQTT_packet_length_decode &rArr; fixed_patch_point_hanlder &rArr; dispatch_fixed_patch_point &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_dump
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_add_event
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_dummy_buggy_MQTT_function
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_fixed_patch_point_test
</UL>

<P><STRONG><a name="[18d]"></a>test_patch_dispatcher</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ebpf_test.o(i.test_patch_dispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = test_patch_dispatcher &rArr; patch_num_eva &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_destroy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_end
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_dump
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_add_event
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_num_eva
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ebpf_test
</UL>

<P><STRONG><a name="[19b]"></a>trigger_debugmon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cortex-m4_fbp.o(i.trigger_debugmon))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = trigger_debugmon &rArr; test_freertos_cve &rArr; profile_dump &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_freertos_cve
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_patch_trigger
</UL>

<P><STRONG><a name="[13e]"></a>uart_config</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, main.o(i.uart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = uart_config &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>uart_error_handle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.uart_error_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uart_error_handle &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.uart_config)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[142]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>

<P><STRONG><a name="[140]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.nrf_gpio_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[15a]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[e5]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[54]"></a>uart_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[53]"></a>uarte_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uarte_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uarte_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[d2]"></a>apply_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[15b]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[d5]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[d4]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[15c]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[d3]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[17a]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[178]"></a>nrf_uart_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[19c]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[17b]"></a>rx_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrfx_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[19d]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[179]"></a>rx_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrfx_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[17c]"></a>tx_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[19e]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[177]"></a>uart_irq_handler</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_0_irq_handler
</UL>

<P><STRONG><a name="[d6]"></a>apply_config</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrfx_uarte.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[130]"></a>interrupts_enable</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, nrfx_uarte.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[15d]"></a>nrf_gpio_cfg</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[d9]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[d8]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[15e]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[d7]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[17f]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[131]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[17e]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[19f]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrfx_uarte.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[1a0]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uarte.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[17d]"></a>uarte_irq_handler</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, nrfx_uarte.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_0_irq_handler
</UL>

<P><STRONG><a name="[176]"></a>prs_box_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[e9]"></a>buffer_add</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[12e]"></a>int_print</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[12f]"></a>unsigned_print</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[144]"></a>memobj_op</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memobj_op
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[c2]"></a>fifo_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[c4]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[c6]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_uart_fifo.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_uart_rx &rArr; nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[cd]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_uart_fifo.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[4d]"></a>uart_event_handler</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[61]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>serial_tx</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[e6]"></a>buf_prealloc</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[10b]"></a>dropped_sat16_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[13a]"></a>invalid_packets_omit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[e8]"></a>log_skip</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[145]"></a>module_idx_get</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>

<P><STRONG><a name="[16b]"></a>std_n</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>

<P><STRONG><a name="[16f]"></a>postfix_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[16d]"></a>prefix_process</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[83]"></a>_DoInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[85]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[87]"></a>_WriteBlocking</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[86]"></a>_WriteNoCheck</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[104]"></a>cli_print_help</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ihp_cli.o(i.cli_print_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cli_print_help &rArr; shell_printf &rArr; shell_echo_str &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_test_by_id
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_shell_cli
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
</UL>

<P><STRONG><a name="[3]"></a>reset_patch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ihp_cli.o(i.reset_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = reset_patch &rArr; show_hw_bkpt &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_hw_bkpt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_all_hw_bkpt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ihp_cli.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>run_eva_test</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ihp_cli.o(i.run_eva_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = run_eva_test &rArr; run_ebpf_test &rArr; test_patch_dispatcher &rArr; patch_num_eva &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ebpf_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ihp_cli.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>run_fixed_patch_point_test</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ihp_cli.o(i.run_fixed_patch_point_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = run_fixed_patch_point_test &rArr; test_fixed_patch_point &rArr; call_dummy_buggy_MQTT_function &rArr; dummy_buggy_MQTT_packet_length_decode &rArr; fixed_patch_point_hanlder &rArr; dispatch_fixed_patch_point &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fixed_patch_point
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_fixed_patch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ihp_cli.o(.data)
</UL>
<P><STRONG><a name="[193]"></a>shell_dispatch_cmd</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, ihp_cli.o(i.shell_dispatch_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = shell_dispatch_cmd &rArr; read_local_patch &rArr; gen_jit_code &rArr; jit_compile &rArr; build_body &rArr; build_inst &rArr; emit_alu64_reg &rArr; emit_alu32_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_test_by_id
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2int
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_hw_bkpt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_all_patches
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_patch_mode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ebpf_eva
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_local_patch
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_patch_list
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_print_help
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process
</UL>

<P><STRONG><a name="[18f]"></a>shell_echo_str</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ihp_cli.o(i.shell_echo_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = shell_echo_str &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_put_char
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_shell_cli
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_printf
</UL>

<P><STRONG><a name="[198]"></a>shell_last_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ihp_cli.o(i.shell_last_char))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process
</UL>

<P><STRONG><a name="[105]"></a>shell_printf</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ihp_cli.o(i.shell_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = shell_printf &rArr; shell_echo_str &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_echo_str
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_test_by_id
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_print_help
</UL>

<P><STRONG><a name="[191]"></a>shell_process</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, ihp_cli.o(i.shell_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = shell_process &rArr; shell_dispatch_cmd &rArr; read_local_patch &rArr; gen_jit_code &rArr; jit_compile &rArr; build_body &rArr; build_inst &rArr; emit_alu64_reg &rArr; emit_alu32_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_last_char
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_echo_str
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_shell_cli
</UL>

<P><STRONG><a name="[196]"></a>show_patch_list</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ihp_cli.o(i.show_patch_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = show_patch_list &rArr; show_local_patch_desc &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_local_patch_desc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_dispatch_cmd
</UL>

<P><STRONG><a name="[1]"></a>test_debug_patch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ihp_cli.o(i.test_debug_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = test_debug_patch &rArr; test_debugmon_patch &rArr; test_freertos_cve &rArr; profile_dump &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_debugmon_patch
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ihp_cli.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>test_patch_trigger</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ihp_cli.o(i.test_patch_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = test_patch_trigger &rArr; trigger_debugmon &rArr; test_freertos_cve &rArr; profile_dump &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_debugmon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ihp_cli.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>this_is_cve_trigger_func</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ihp_cli.o(i.this_is_cve_trigger_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = this_is_cve_trigger_func &rArr; profile_dump &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_dynamic_bug
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_end
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_dump
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_add_event
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ihp_cli.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>active_patch</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iotpatch.o(i.active_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = active_patch &rArr; add_hw_bkpt &rArr; add_fpb_bkpt &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_hw_bkpt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bits_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_patch_to_ctx
</UL>

<P><STRONG><a name="[b2]"></a>add_dynamic_patch_to_ctx</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, iotpatch.o(i.add_dynamic_patch_to_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = add_dynamic_patch_to_ctx &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bpkt_pc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_bpkt_addr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_malloc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_patch_to_ctx
</UL>

<P><STRONG><a name="[b6]"></a>add_fixed_patch_to_ctx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, iotpatch.o(i.add_fixed_patch_to_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = add_fixed_patch_to_ctx &rArr; arraymap_set &rArr; ebpf_realloc &rArr; ebpf_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_set
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_local_patch_to_ctx
</UL>

<P><STRONG><a name="[b0]"></a>update_bits_filter</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, iotpatch.o(i.update_bits_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_bits_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_iter_val
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_patch
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_patch_sys
</UL>

<P><STRONG><a name="[5b]"></a>my_memmove</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ebpf_test.o(i.my_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = my_memmove &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_test.o(i.test_ebpf_c3)
</UL>
<P><STRONG><a name="[51]"></a>RawBuggyFunc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cortex-m4_fbp.o(i.RawBuggyFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RawBuggyFunc &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cortex-m4_fbp.o(i.fpb_setup_test)
</UL>
<P><STRONG><a name="[b8]"></a>add_fpb_bkpt</STRONG> (Thumb, 246 bytes, Stack size 64 bytes, cortex-m4_fbp.o(i.add_fpb_bkpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = add_fpb_bkpt &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_16_bit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_branch_instr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_hw_bkpt
</UL>

<P><STRONG><a name="[107]"></a>debug_monitor_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, cortex-m4_fbp.o(i.debug_monitor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = debug_monitor_init &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpb_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_patch_mode
</UL>

<P><STRONG><a name="[103]"></a>fpb_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cortex-m4_fbp.o(i.fpb_disable))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_all_hw_bkpt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_debug_monitor
</UL>

<P><STRONG><a name="[108]"></a>fpb_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cortex-m4_fbp.o(i.fpb_enable))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_patch_mode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_debug_monitor
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_monitor_init
</UL>

<P><STRONG><a name="[126]"></a>fpb_setup_test</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cortex-m4_fbp.o(i.fpb_setup_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fpb_setup_test &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;little_endian_16_bit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_branch_instr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_debugmon_patch
</UL>

<P><STRONG><a name="[132]"></a>run_patch_here</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cortex-m4_fbp.o(i.run_patch_here))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = run_patch_here &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ebpf_filter
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dynamic_patch_by_bpkt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_end
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leave_debug_monitor
</UL>

<P><STRONG><a name="[19a]"></a>test_freertos_cve</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, cortex-m4_fbp.o(i.test_freertos_cve))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = test_freertos_cve &rArr; profile_dump &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_end
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_dump
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_add_event
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hera_fix_func
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trigger_debugmon
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_debugmon_patch
</UL>

<P><STRONG><a name="[186]"></a>cycles_to_us</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, profiling.o(i.cycles_to_us))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_dump
</UL>

<P><STRONG><a name="[185]"></a>dwt_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, profiling.o(i.dwt_init))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_add_event
</UL>

<P><STRONG><a name="[4e]"></a>call_dummy_buggy_MQTT_function</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, fixed_patch_points.o(i.call_dummy_buggy_MQTT_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = call_dummy_buggy_MQTT_function &rArr; dummy_buggy_MQTT_packet_length_decode &rArr; fixed_patch_point_hanlder &rArr; dispatch_fixed_patch_point &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_start
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_end
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_buggy_MQTT_packet_length_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fixed_patch_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fixed_patch_points.o(i.call_dummy_buggy_MQTT_function)
</UL>
<P><STRONG><a name="[4f]"></a>dummy_buggy_MQTT_packet_length_decode</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fixed_patch_points.o(i.dummy_buggy_MQTT_packet_length_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dummy_buggy_MQTT_packet_length_decode &rArr; fixed_patch_point_hanlder &rArr; dispatch_fixed_patch_point &rArr; run_ebpf_filter &rArr; ebpf_vm_exec &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_patch_point_hanlder
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_dummy_buggy_MQTT_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fixed_patch_points.o(i.call_dummy_buggy_MQTT_function)
</UL>
<P><STRONG><a name="[de]"></a>binary_search</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, hashmap.o(i.binary_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = binary_search
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_get
</UL>

<P><STRONG><a name="[11a]"></a>bounds_check</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, ebpf_vm.o(i.bounds_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bounds_check
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_vm_exec
</UL>

<P><STRONG><a name="[57]"></a>iot_call_C_func_noret</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, ebpf_vm.o(i.iot_call_C_func_noret))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = iot_call_C_func_noret &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_vm.o(i.set_default_helpers)
</UL>
<P><STRONG><a name="[56]"></a>iot_print_log</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ebpf_vm.o(i.iot_print_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = iot_print_log &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_vm.o(i.set_default_helpers)
</UL>
<P><STRONG><a name="[59]"></a>tmp_map_get_val</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ebpf_vm.o(i.tmp_map_get_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tmp_map_get_val &rArr; arraymap_get &rArr; binary_search
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_vm.o(i.set_default_helpers)
</UL>
<P><STRONG><a name="[58]"></a>tmp_map_save_val</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ebpf_vm.o(i.tmp_map_save_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tmp_map_save_val &rArr; arraymap_set &rArr; ebpf_realloc &rArr; ebpf_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraymap_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ebpf_vm.o(i.set_default_helpers)
</UL>
<P><STRONG><a name="[119]"></a>use_default_helper_func</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ebpf_vm.o(i.use_default_helper_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = use_default_helper_func &rArr; ebpf_calloc &rArr; calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_iot_ebpf_helpers
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ebpf_register
</UL>

<P><STRONG><a name="[8c]"></a>_emit_add_reg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, jit_thumb2.o(i._emit_add_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _emit_add_reg &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb16_ADD_REG_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ldx_reg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_str_reg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_reg
</UL>

<P><STRONG><a name="[90]"></a>_emit_b</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, jit_thumb2.o(i._emit_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _emit_b &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[91]"></a>_emit_b_cond</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, jit_thumb2.o(i._emit_b_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _emit_b_cond &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_use_b4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_jump
</UL>

<P><STRONG><a name="[93]"></a>_emit_cmp_cond</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, jit_thumb2.o(i._emit_cmp_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _emit_cmp_cond &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_SBCW_T2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_ORRW_REG_T2
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_ADDW_REG_T3
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_cmp_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[96]"></a>_emit_cmp_reg</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, jit_thumb2.o(i._emit_cmp_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _emit_cmp_reg &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_cmp_cond
</UL>

<P><STRONG><a name="[98]"></a>_emit_jump</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, jit_thumb2.o(i._emit_jump))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _emit_jump &rArr; _emit_b_cond &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_b_cond
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[99]"></a>_emit_ldr_i</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, jit_thumb2.o(i._emit_ldr_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _emit_ldr_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ldx_reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg32
</UL>

<P><STRONG><a name="[9a]"></a>_emit_ldrb_i</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, jit_thumb2.o(i._emit_ldrb_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _emit_ldrb_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ldx_reg
</UL>

<P><STRONG><a name="[9b]"></a>_emit_ldrd_i</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, jit_thumb2.o(i._emit_ldrd_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _emit_ldrd_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_reg64
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg64
</UL>

<P><STRONG><a name="[9c]"></a>_emit_ldrh_i</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, jit_thumb2.o(i._emit_ldrh_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _emit_ldrh_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ldx_reg
</UL>

<P><STRONG><a name="[9f]"></a>_emit_mov_reg</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, jit_thumb2.o(i._emit_mov_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _emit_mov_reg &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_lsh64_imm
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_reg64
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_i64
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_i64
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_prologue
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg32
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_compile
</UL>

<P><STRONG><a name="[a4]"></a>_emit_str_i</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, jit_thumb2.o(i._emit_str_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_str_reg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg32
</UL>

<P><STRONG><a name="[a5]"></a>_emit_strd_i</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, jit_thumb2.o(i._emit_strd_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _emit_strd_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_reg64
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg64
</UL>

<P><STRONG><a name="[a6]"></a>_emit_sub_imm</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, jit_thumb2.o(i._emit_sub_imm))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _emit_sub_imm &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_SUBW_IMM_T4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_prologue
</UL>

<P><STRONG><a name="[a8]"></a>_emit_sub_reg</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, jit_thumb2.o(i._emit_sub_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _emit_sub_reg &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_SUB_REG_T2
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_SBCW_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_reg
</UL>

<P><STRONG><a name="[8e]"></a>_thumb16_ADD_REG_T2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, jit_thumb2.o(i._thumb16_ADD_REG_T2))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mul_r64
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_add_reg
</UL>

<P><STRONG><a name="[94]"></a>_thumb32_ADDW_REG_T3</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, jit_thumb2.o(i._thumb32_ADDW_REG_T3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thumb32_ADDW_REG_T3
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_cmp_cond
</UL>

<P><STRONG><a name="[11e]"></a>_thumb32_ASRW_IMM_T2</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, jit_thumb2.o(i._thumb32_ASRW_IMM_T2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _thumb32_ASRW_IMM_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_i64
</UL>

<P><STRONG><a name="[121]"></a>_thumb32_ASRW_REG_T2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jit_thumb2.o(i._thumb32_ASRW_REG_T2))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_reg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
</UL>

<P><STRONG><a name="[120]"></a>_thumb32_LSLW_REG_T2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jit_thumb2.o(i._thumb32_LSLW_REG_T2))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_reg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_r64
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
</UL>

<P><STRONG><a name="[11d]"></a>_thumb32_LSRW_IMM_T2</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, jit_thumb2.o(i._thumb32_LSRW_IMM_T2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _thumb32_LSRW_IMM_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_i64
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_i64
</UL>

<P><STRONG><a name="[11f]"></a>_thumb32_LSRW_REG_T2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jit_thumb2.o(i._thumb32_LSRW_REG_T2))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_reg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_r64
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
</UL>

<P><STRONG><a name="[122]"></a>_thumb32_MUL_T2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, jit_thumb2.o(i._thumb32_MUL_T2))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mul_r64
</UL>

<P><STRONG><a name="[95]"></a>_thumb32_ORRW_REG_T2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, jit_thumb2.o(i._thumb32_ORRW_REG_T2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thumb32_ORRW_REG_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_reg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_r64
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_i64
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_i64
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_cmp_cond
</UL>

<P><STRONG><a name="[ff]"></a>_thumb32_PUSHW_T2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, jit_thumb2.o(i._thumb32_PUSHW_T2))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_push_r64
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_prologue
</UL>

<P><STRONG><a name="[f7]"></a>_thumb32_RSBW_IMM_T2</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, jit_thumb2.o(i._thumb32_RSBW_IMM_T2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _thumb32_RSBW_IMM_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_r64
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[97]"></a>_thumb32_SBCW_T2</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, jit_thumb2.o(i._thumb32_SBCW_T2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thumb32_SBCW_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_sub_reg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_cmp_cond
</UL>

<P><STRONG><a name="[a7]"></a>_thumb32_SUBW_IMM_T4</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, jit_thumb2.o(i._thumb32_SUBW_IMM_T4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _thumb32_SUBW_IMM_T4
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_r64
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_sub_imm
</UL>

<P><STRONG><a name="[a9]"></a>_thumb32_SUB_REG_T2</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, jit_thumb2.o(i._thumb32_SUB_REG_T2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thumb32_SUB_REG_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_sub_reg
</UL>

<P><STRONG><a name="[92]"></a>_use_b4</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, jit_thumb2.o(i._use_b4))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_b_cond
</UL>

<P><STRONG><a name="[a2]"></a>arm_bpf_get_reg32</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, jit_thumb2.o(i.arm_bpf_get_reg32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arm_bpf_get_reg32 &rArr; _emit_ldr_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldr_i
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu64_reg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_lsh64_reg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_u32_div_mod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_str_reg
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_reg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_imm
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_r64
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mov_reg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[9e]"></a>arm_bpf_get_reg64</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, jit_thumb2.o(i.arm_bpf_get_reg64))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm_bpf_get_reg64 &rArr; _emit_ldrd_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldrd_i
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu64_reg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_lsh64_reg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_lsh64_imm
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_push_r64
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_r64
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_i64
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mul_r64
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_i64
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[a3]"></a>arm_bpf_put_reg32</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, jit_thumb2.o(i.arm_bpf_put_reg32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_str_i
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_mov_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_lsh64_reg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_u32_div_mod
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_reg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_imm
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_r64
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mul_r64
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mov_reg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
</UL>

<P><STRONG><a name="[a0]"></a>arm_bpf_put_reg64</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, jit_thumb2.o(i.arm_bpf_put_reg64))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = arm_bpf_put_reg64 &rArr; emit_a32_mov_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mov_reg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_strd_i
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ldx_reg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu64_reg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_lsh64_imm
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_i64
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_i64
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_i64
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[fc]"></a>bpf2a32_offset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, jit_thumb2.o(i.bpf2a32_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bpf2a32_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[eb]"></a>build_body</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, jit_thumb2.o(i.build_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = build_body &rArr; build_inst &rArr; emit_alu64_reg &rArr; emit_alu32_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_compile
</UL>

<P><STRONG><a name="[ec]"></a>build_inst</STRONG> (Thumb, 1394 bytes, Stack size 56 bytes, jit_thumb2.o(i.build_inst))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = build_inst &rArr; emit_alu64_reg &rArr; emit_alu32_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_log
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ldx_reg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu64_reg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_lsh64_reg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_lsh64_imm
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_u32_div_mod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_str_reg
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_push_r64
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_se_imm64
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_reg64
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_imm
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_i64
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_imm
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_r64
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_i64
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mul_r64
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_i64
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpf2a32_offset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg64
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg64
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg32
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_use_b4
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_RSBW_IMM_T2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_jump
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_cmp_cond
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_b
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_body
</UL>

<P><STRONG><a name="[fe]"></a>build_prologue</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, jit_thumb2.o(i.build_prologue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = build_prologue &rArr; _emit_sub_imm &rArr; debug_log &rArr; log_print_porting &rArr; shell_put_char &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_reg64
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_imm
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_PUSHW_T2
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_sub_imm
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_mov_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_compile
</UL>

<P><STRONG><a name="[8f]"></a>emit2</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, jit_thumb2.o(i.emit2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_lsh64_imm
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_push_r64
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_imm
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_reg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_imm
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mul_r64
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_sub_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_sub_imm
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_mov_reg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldrh_i
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldrb_i
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_cmp_reg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_b_cond
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_b
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_add_reg
</UL>

<P><STRONG><a name="[8d]"></a>emit4</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, jit_thumb2.o(i.emit4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_lsh64_reg
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_lsh64_imm
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_u32_div_mod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_str_reg
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_push_r64
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_imm
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu32_reg
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_r64
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_i64
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mul_r64
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_r64
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_arsh_i64
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_prologue
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_sub_reg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_sub_imm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_strd_i
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_str_i
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_mov_reg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldrh_i
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldrd_i
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldrb_i
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldr_i
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_cmp_cond
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_b_cond
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_b
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_add_reg
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jit_compile
</UL>

<P><STRONG><a name="[f6]"></a>emit_a32_arsh_i64</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, jit_thumb2.o(i.emit_a32_arsh_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = emit_a32_arsh_i64 &rArr; arm_bpf_put_reg64 &rArr; emit_a32_mov_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg64
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg64
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_ORRW_REG_T2
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_LSRW_IMM_T2
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_ASRW_IMM_T2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_mov_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[f5]"></a>emit_a32_arsh_r64</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, jit_thumb2.o(i.emit_a32_arsh_r64))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = emit_a32_arsh_r64 &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg32
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg64
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg32
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_SUBW_IMM_T4
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_RSBW_IMM_T2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_ORRW_REG_T2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_LSRW_REG_T2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_LSLW_REG_T2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_ASRW_REG_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[da]"></a>emit_a32_mov_reg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, jit_thumb2.o(i.emit_a32_mov_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emit_a32_mov_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg32
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg32
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ldx_reg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_reg64
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg64
</UL>

<P><STRONG><a name="[f8]"></a>emit_a32_mul_r64</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, jit_thumb2.o(i.emit_a32_mul_r64))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = emit_a32_mul_r64 &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg32
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg64
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_MUL_T2
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb16_ADD_REG_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[f4]"></a>emit_a32_rsh_i64</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, jit_thumb2.o(i.emit_a32_rsh_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = emit_a32_rsh_i64 &rArr; arm_bpf_put_reg64 &rArr; emit_a32_mov_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_imm
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg64
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg64
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_ORRW_REG_T2
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_LSRW_IMM_T2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_mov_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[f3]"></a>emit_a32_rsh_r64</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, jit_thumb2.o(i.emit_a32_rsh_r64))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = emit_a32_rsh_r64 &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg32
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg64
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg32
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_SUBW_IMM_T4
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_RSBW_IMM_T2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_ORRW_REG_T2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_LSRW_REG_T2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_LSLW_REG_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[f2]"></a>emit_alu32_imm</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, jit_thumb2.o(i.emit_alu32_imm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = emit_alu32_imm &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg32
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg32
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[123]"></a>emit_alu32_reg</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, jit_thumb2.o(i.emit_alu32_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = emit_alu32_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg32
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg32
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_ORRW_REG_T2
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_LSRW_REG_T2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_LSLW_REG_T2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_ASRW_REG_T2
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_sub_reg
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_add_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_alu64_reg
</UL>

<P><STRONG><a name="[f9]"></a>emit_mov_i64</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, jit_thumb2.o(i.emit_mov_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = emit_mov_i64 &rArr; arm_bpf_put_reg64 &rArr; emit_a32_mov_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_imm
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg64
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_se_imm64
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[ee]"></a>emit_mov_imm</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, jit_thumb2.o(i.emit_mov_imm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emit_mov_imm &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ldx_reg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_u32_div_mod
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_str_reg
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_se_imm64
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_i64
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_rsh_i64
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_prologue
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[ed]"></a>emit_mov_reg64</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, jit_thumb2.o(i.emit_mov_reg64))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = emit_mov_reg64 &rArr; emit_a32_mov_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_a32_mov_reg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_strd_i
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_mov_reg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_ldrd_i
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_prologue
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[ef]"></a>emit_mov_se_imm64</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, jit_thumb2.o(i.emit_mov_se_imm64))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = emit_mov_se_imm64 &rArr; emit_mov_i64 &rArr; arm_bpf_put_reg64 &rArr; emit_a32_mov_reg &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_imm
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_i64
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[fd]"></a>emit_push_r64</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, jit_thumb2.o(i.emit_push_r64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emit_push_r64 &rArr; arm_bpf_get_reg64 &rArr; _emit_ldrd_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit2
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg64
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thumb32_PUSHW_T2
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[fb]"></a>emit_str_reg</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, jit_thumb2.o(i.emit_str_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = emit_str_reg &rArr; emit_mov_imm &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ldst_imm
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_imm
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg32
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_str_i
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_emit_add_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[f1]"></a>emit_u32_div_mod</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, jit_thumb2.o(i.emit_u32_div_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = emit_u32_div_mod &rArr; arm_bpf_put_reg32 &rArr; _emit_str_i &rArr; emit4 &rArr; emit2
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_mov_imm
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit4
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_put_reg32
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_bpf_get_reg32
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_inst
</UL>

<P><STRONG><a name="[124]"></a>is_ldst_imm</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, jit_thumb2.o(i.is_ldst_imm))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_ldx_reg
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emit_str_reg
</UL>

<P><STRONG><a name="[aa]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8b]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[ad]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ac]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
